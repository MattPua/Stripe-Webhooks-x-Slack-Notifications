import Stripe from 'stripe';

export type StripeEventCatalog = Record<string, readonly Stripe.Event.Type[]>;

// This catalog includes commonly used Stripe events grouped by domain.
// It is not guaranteed to be exhaustive across all Stripe products, but covers the major surfaces.
export const STRIPE_EVENT_CATALOG = {
  application_fees: [
    'application_fee.created',
    'application_fee.refunded',
    'application_fee.refund.updated',
  ],
  account: [
    'account.updated',
    'account.external_account.created',
    'account.external_account.deleted',
    'account.external_account.updated',
    'capability.updated',
    'person.created',
    'person.deleted',
    'person.updated',
  ],
  balance: ['balance.available'],
  billing_portal: [
    'billing_portal.configuration.created',
    'billing_portal.configuration.updated',
    'billing_portal.session.created',
  ],
  charges: [
    'charge.captured',
    'charge.expired',
    'charge.failed',
    'charge.pending',
    'charge.refunded',
    'charge.succeeded',
    'charge.updated',
    'charge.dispute.closed',
    'charge.dispute.created',
    'charge.dispute.funds_reinstated',
    'charge.dispute.funds_withdrawn',
    'charge.dispute.updated',
  ],
  checkout: [
    'checkout.session.completed',
    'checkout.session.expired',
    'checkout.session.async_payment_succeeded',
    'checkout.session.async_payment_failed',
  ],
  coupons: ['coupon.created', 'coupon.deleted', 'coupon.updated'],
  credit_notes: [
    'credit_note.created',
    'credit_note.updated',
    'credit_note.voided',
  ],
  customers: [
    'customer.created',
    'customer.deleted',
    'customer.updated',
    'customer.source.created',
    'customer.source.updated',
    'customer.source.deleted',
    'cash_balance.funds_available',
    'customer.discount.created',
    'customer.discount.deleted',
    'customer.discount.updated',
    'customer.tax_id.created',
    'customer.tax_id.deleted',
    'customer.tax_id.updated',
    'payment_method.attached',
    'payment_method.detached',
    'payment_method.updated',
    'payment_method.automatically_updated',
  ],
  files: ['file.created'],
  identity: [
    'identity.verification_session.canceled',
    'identity.verification_session.created',
    'identity.verification_session.processing',
    'identity.verification_session.requires_input',
    'identity.verification_session.verified',
  ],
  invoices: [
    'invoice.created',
    'invoice.deleted',
    'invoice.finalization_failed',
    'invoice.finalized',
    'invoice.marked_uncollectible',
    'invoice.paid',
    'invoice.payment_action_required',
    'invoice.payment_failed',
    'invoice.sent',
    'invoice.upcoming',
    'invoice.updated',
    'invoice.voided',
  ],
  invoiceitems: [
    'invoiceitem.created',
    'invoiceitem.updated',
    'invoiceitem.deleted',
  ],
  issuing: [
    'issuing_authorization.created',
    'issuing_authorization.request',
    'issuing_authorization.updated',
    'issuing_card.created',
    'issuing_card.updated',
    'issuing_cardholder.created',
    'issuing_cardholder.updated',
    'issuing_dispute.created',
    'issuing_dispute.updated',
    'issuing_transaction.created',
    'issuing_transaction.updated',
  ],
  mandates: ['mandate.updated'],
  payment_intents: [
    'payment_intent.amount_capturable_updated',
    'payment_intent.canceled',
    'payment_intent.created',
    'payment_intent.partially_funded',
    'payment_intent.payment_failed',
    'payment_intent.processing',
    'payment_intent.requires_action',
    'payment_intent.succeeded',
  ],
  payment_links: ['payment_link.created', 'payment_link.updated'],
  payouts: [
    'payout.canceled',
    'payout.created',
    'payout.failed',
    'payout.paid',
    'payout.updated',
  ],
  plans: ['plan.created', 'plan.deleted', 'plan.updated'],
  prices: ['price.created', 'price.updated', 'price.deleted'],
  products: ['product.created', 'product.deleted', 'product.updated'],
  promotion_codes: ['promotion_code.created', 'promotion_code.updated'],
  quotes: [
    'quote.accepted',
    'quote.canceled',
    'quote.created',
    'quote.finalized',
  ],
  refunds: ['refund.created', 'refund.updated'],
  reviews: ['review.closed', 'review.opened'],
  radar: [
    'radar.early_fraud_warning.created',
    'radar.early_fraud_warning.updated',
  ],
  setup_intents: [
    'setup_intent.canceled',
    'setup_intent.created',
    'setup_intent.requires_action',
    'setup_intent.setup_failed',
    'setup_intent.succeeded',
  ],
  sigma: ['sigma.scheduled_query_run.created'],
  subscription_schedules: [
    'subscription_schedule.aborted',
    'subscription_schedule.canceled',
    'subscription_schedule.completed',
    'subscription_schedule.created',
    'subscription_schedule.expiring',
    'subscription_schedule.released',
    'subscription_schedule.updated',
  ],
  subscriptions: [
    'customer.subscription.created',
    'customer.subscription.deleted',
    'customer.subscription.paused',
    'customer.subscription.pending_update_applied',
    'customer.subscription.pending_update_expired',
    'customer.subscription.resumed',
    'customer.subscription.trial_will_end',
    'customer.subscription.updated',
  ],
  tax: ['tax_rate.created', 'tax_rate.updated'],
  terminal: [
    'terminal.reader.action_failed',
    'terminal.reader.action_succeeded',
  ],
  topups: [
    'topup.canceled',
    'topup.created',
    'topup.failed',
    'topup.reversed',
    'topup.succeeded',
  ],
  transfers: ['transfer.created', 'transfer.reversed', 'transfer.updated'],
} as const satisfies StripeEventCatalog;
